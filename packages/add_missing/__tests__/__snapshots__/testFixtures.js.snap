exports[`test auto/detects-imports.js 1`] = `
"
import foo from \'foo\';

import bar from \'bar\';
bar();"
`;

exports[`test auto/detects-imports.js 2`] = `
"
import foo from \'foo\';

import bar from \'bar\';
bar();"
`;

exports[`test auto/detects-imports.js 3`] = `
"
import foo from \'foo\';

const bar = require(\'bar\');

bar();"
`;

exports[`test auto/detects-imports.js 4`] = `
"
import foo from \'foo\';

import bar from \'bar\';
bar();"
`;

exports[`test auto/detects-requires.js 1`] = `
"
const foo = require(\'foo\');

const bar = require(\'bar\');

bar();"
`;

exports[`test auto/detects-requires.js 2`] = `
"
const foo = require(\'foo\');

const bar = require(\'bar\');

bar();"
`;

exports[`test auto/detects-requires.js 3`] = `
"
const foo = require(\'foo\');

const bar = require(\'bar\');

bar();"
`;

exports[`test auto/detects-requires.js 4`] = `
"
const foo = require(\'foo\');

import bar from \'bar\';
bar();"
`;

exports[`test auto/ignores_type_imports.js 1`] = `
"
import type foo from \'foo\';

const bar = require(\'bar\');

bar();"
`;

exports[`test auto/ignores_type_imports.js 2`] = `
"
import type foo from \'foo\';

const bar = require(\'bar\');

bar();"
`;

exports[`test auto/ignores_type_imports.js 3`] = `
"
import type foo from \'foo\';

const bar = require(\'bar\');

bar();"
`;

exports[`test auto/ignores_type_imports.js 4`] = `
"
import type foo from \'foo\';

import bar from \'bar\';
bar();"
`;

exports[`test flow/both_type_and_value_position.js 1`] = `
"
// Type position of Foo comes before value position.
function foo(): Foo {
  return new Foo();
}

// Value position of Bar comes before type position.
const theBar = new Bar();
function bar(): Bar {
  return theBar;
}

const Foo = require(\"Foo\");

const Bar = require(\"Bar\");"
`;

exports[`test flow/both_type_and_value_position.js 2`] = `
"
// Type position of Foo comes before value position.
function foo(): Foo {
  return new Foo();
}

// Value position of Bar comes before type position.
const theBar = new Bar();
function bar(): Bar {
  return theBar;
}

const Foo = require(\"Foo\");

const Bar = require(\"Bar\");"
`;

exports[`test flow/both_type_and_value_position.js 3`] = `
"
// Type position of Foo comes before value position.
function foo(): Foo {
  return new Foo();
}

// Value position of Bar comes before type position.
const theBar = new Bar();
function bar(): Bar {
  return theBar;
}

const Foo = require(\"Foo\");

const Bar = require(\"Bar\");"
`;

exports[`test flow/both_type_and_value_position.js 4`] = `
"
// Type position of Foo comes before value position.
function foo(): Foo {
  return new Foo();
}

// Value position of Bar comes before type position.
const theBar = new Bar();
function bar(): Bar {
  return theBar;
}
import Foo from \"Foo\";
import Bar from \"Bar\";"
`;

exports[`test flow/missing_type.js 1`] = `
"
function foo(x: Foo) {}
import type Foo from \"Foo\";"
`;

exports[`test flow/missing_type.js 2`] = `
"
function foo(x: Foo) {}
import type Foo from \"Foo\";"
`;

exports[`test flow/missing_type.js 3`] = `
"
function foo(x: Foo) {}
import type Foo from \"Foo\";"
`;

exports[`test flow/missing_type.js 4`] = `
"
function foo(x: Foo) {}
import type Foo from \"Foo\";"
`;

exports[`test flow/nested_types.js 1`] = `
"
type Baz = string;

function foo(): ?Foo<Bar<Baz, Buz>> {}
import type Foo from \"Foo\";
import type Bar from \"Bar\";
import type Buz from \"Buz\";"
`;

exports[`test flow/nested_types.js 2`] = `
"
type Baz = string;

function foo(): ?Foo<Bar<Baz, Buz>> {}
import type Foo from \"Foo\";
import type Bar from \"Bar\";
import type Buz from \"Buz\";"
`;

exports[`test flow/nested_types.js 3`] = `
"
type Baz = string;

function foo(): ?Foo<Bar<Baz, Buz>> {}
import type Foo from \"Foo\";
import type Bar from \"Bar\";
import type Buz from \"Buz\";"
`;

exports[`test flow/nested_types.js 4`] = `
"
type Baz = string;

function foo(): ?Foo<Bar<Baz, Buz>> {}
import type Foo from \"Foo\";
import type Bar from \"Bar\";
import type Buz from \"Buz\";"
`;

exports[`test scope-trickery/test1.js 1`] = `
"
function foo() {
  var bar = () => {};
}
bar();

var buz = () => {};
function baz() {
  buz();
}

const bar = require(\"bar\");"
`;

exports[`test scope-trickery/test1.js 2`] = `
"
function foo() {
  var bar = () => {};
}
bar();

var buz = () => {};
function baz() {
  buz();
}

const bar = require(\"bar\");"
`;

exports[`test scope-trickery/test1.js 3`] = `
"
function foo() {
  var bar = () => {};
}
bar();

var buz = () => {};
function baz() {
  buz();
}

const bar = require(\"bar\");"
`;

exports[`test scope-trickery/test1.js 4`] = `
"
function foo() {
  var bar = () => {};
}
bar();

var buz = () => {};
function baz() {
  buz();
}
import bar from \"bar\";"
`;

exports[`test simple/empty.js 1`] = `""`;

exports[`test simple/empty.js 2`] = `""`;

exports[`test simple/empty.js 3`] = `""`;

exports[`test simple/empty.js 4`] = `""`;

exports[`test simple/multiple-statements.js 1`] = `
"foo;
foo;
foo;

const foo = require(\"foo\");"
`;

exports[`test simple/multiple-statements.js 2`] = `
"foo;
foo;
foo;

const foo = require(\"foo\");"
`;

exports[`test simple/multiple-statements.js 3`] = `
"foo;
foo;
foo;

const foo = require(\"foo\");"
`;

exports[`test simple/multiple-statements.js 4`] = `
"foo;
foo;
foo;
import foo from \"foo\";"
`;

exports[`test simple/one-statement.js 1`] = `
"foo;

const foo = require(\"foo\");"
`;

exports[`test simple/one-statement.js 2`] = `
"foo;

const foo = require(\"foo\");"
`;

exports[`test simple/one-statement.js 3`] = `
"foo;

const foo = require(\"foo\");"
`;

exports[`test simple/one-statement.js 4`] = `
"foo;
import foo from \"foo\";"
`;

exports[`test simple/skips-first-non-import-statements.js 1`] = `
"
const start = 0; // Date.now() or something.

const foo = require(\'foo\');

const bar = require(\'bar\');

foo();
bar();"
`;

exports[`test simple/skips-first-non-import-statements.js 2`] = `
"
const start = 0; // Date.now() or something.

const foo = require(\'foo\');

const bar = require(\'bar\');

foo();
bar();"
`;

exports[`test simple/skips-first-non-import-statements.js 3`] = `
"
const start = 0; // Date.now() or something.

const foo = require(\'foo\');

const bar = require(\'bar\');

foo();
bar();"
`;

exports[`test simple/skips-first-non-import-statements.js 4`] = `
"
const start = 0; // Date.now() or something.

const foo = require(\'foo\');

import bar from \'bar\';
foo();
bar();"
`;
